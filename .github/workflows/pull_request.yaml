name: pull_request

on:
  pull_request

permissions:
  contents: read
  pull-requests: read

jobs:
  helm-lint:
    uses: MapColonies/shared-workflows/actions/helm-lint@helm-lint-v1.0.0
    with:
      # for example
      # chartDirs: helm
      chartDirs: YOUR_CHARTS_PATH

  eslint:
    uses: MapColonies/shared-workflows/actions/eslint@eslint-v1.0.1
    with:
      # for example
      # path: ./src
      path: YOUR_NODEJS_CODE_PATH

  openapi-lint:
    uses: MapColonies/shared-workflows/actions/openapi-lint@openapi-lint-v1.0.0
    with:
      # for example
      # node_version: "20"
      # openapi-file: ./openapi3.yaml
      # path: ./src
      node_version: YOUR_NODE_VERSION
      openapi-file: YOUR_OPENAPI_FILE_PATH
      path: YOUR_NODEJS_CODE_PATH

  security:
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@master
      - name: Run Snyk to check for vulnerabilities
        uses: snyk/actions/node@master
        continue-on-error: true
        env:
          SNYK_TOKEN: ${{ secrets.SNYK_TOKEN }}

  tests:
    name: Run Tests
    runs-on: ubuntu-latest
    strategy:
      matrix:
        node: [20.x, 22.x]
    services:
      # Label used to access the service container
      postgres:
        # Docker Hub image
        image: ${{ (inputs.usePostgres == true) && 'postgis/postgis:13-3.4' || ''}}
        # Provide the password for postgres
        env:
          POSTGRES_PASSWORD: 1234
          POSTGRES_USER: postgres
          POSTGRES_DB: postgres
        ports:
          - 5432:5432
        # Set health checks to wait until postgres has started
        options: >-
          --health-cmd pg_isready
          --health-interval 10s
          --health-timeout 5s
          --health-retries 5
    steps:
      - name: Check out Git repository
        uses: actions/checkout@v4

      - name: Set up Node.js
        uses: actions/setup-node@v1
        with:
          node-version: ${{ matrix.node }}

      - name: Install Node.js dependencies
        run: npm ci

      - name: Run tests
        run: npm run test

      - uses: actions/upload-artifact@v4
        with:
          name: Test Reporters Node-${{ matrix.node }}
          path: reports/**

  Artifactory_Login:
    uses: MapColonies/shared-workflows/actions/artifactory-login@artifactory-login-v1.0.0
    with:
      registry: ACR_URL
      username: ACR_PUSH_USER
      password: ACR_PUSH_TOKEN

  Build_Docker_Image:
    uses: MapColonies/shared-workflows/actions/build-docker@build-docker-v1.1.0
    with:
      # for example
      # domain: infra
      domain: YOUR-DOMAIN
      registry: ACR_URL

  Push_Docker_Image:
    uses: MapColonies/shared-workflows/actions/push-docker@push-docker-v1.0.1
    with:
      # for example
      # image_name: scaler
      # image_tag: v1.0.0
      image_name: DOCKER_IMAGE_NAME
      image_tag: DOCKER_IMAGE_TAG

  Build_and_Push_Helm_Chart:
    uses: MapColonies/shared-workflows/actions/build-and-push-helm@build-and-push-helm-v1.0.1
    with:
      # for example
      # context: ./infra/monitoring
      # domain: infra
      context: YOUR-PATH
      domain: YOUR-DOMAIN
      registry: ACR_URL

  update_artifacts_file:
    uses: MapColonies/shared-workflows/actions/update-artifacts-file@update-artifacts-file-v1.1.1
    with:
      # for example
      # domain: infra
      # artifact_name: "sftpgo"
      # artifact_tag: "v1.2.3"
      # type: "docker"
      domain: YOUR-DOMAIN
      artifact_name: ARTIFACT_NAME
      artifact_tag: ARTIFACT_TAG
      type: ARTIFACT_TYPE
      registry: ACR_URL
      github_token: YOUR_GITHUB_TOKEN
